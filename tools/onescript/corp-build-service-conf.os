#Использовать v8runner
#Использовать logos
#Использовать "./РаботаСФайлами"

Перем Лог;
Перем МассивВременныхФайлов;

Функция ПолучитьИмяВременногоФайлаЛокально(Расширение="")
	Если Не ТипЗнч(МассивВременныхФайлов) = Тип("Массив") Тогда
		МассивВременныхФайлов = Новый Массив;		
	КонецЕсли;

	ТекВременныйФайл = ПолучитьИмяВременногоФайла(Расширение);
	МассивВременныхФайлов.Добавить(ТекВременныйФайл);

	Возврат ТекВременныйФайл;
КонецФункции

Функция ПреобразоватьПутьСТочкамиКНормальномуПути(ОригСтр)
	ИмяВременногоФайлаКоманда = ПолучитьИмяВременногоФайлаЛокально("cmd");
	ИмяВременногоФайлаЛог     = ПолучитьИмяВременногоФайлаЛокально("txt");
	
	Лог.Информация("ИмяВременногоФайлаКоманда: " + ИмяВременногоФайлаКоманда);
	Лог.Информация("ИмяВременногоФайлаЛог: " + ИмяВременногоФайлаЛог);
	//ИмяВременногоФайлаЛог     ="e:\vanessa\temp\runbehaviorTemp.txt";
	

	//ИмяВременногоФайлаКоманда = "h:\commons\temp\111.cmd";
	//ИмяВременногоФайлаЛог     = "h:\commons\temp\111.txt";


	Команда = "
				|@echo on
				|chcp 65001
				|for %%f in ( """ + ОригСтр + """ ) do set fullname=%%~ff
				|echo %fullname% > " + ИмяВременногоФайлаЛог + "
				|rem pause";

	//ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманда,"UTF-8",,Ложь);
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманда,"UTF-8");
	ЗТ.ЗаписатьСтроку(Команда);

	ЗТ.Закрыть();




	retCode = -1;
	ЗапуститьПриложение(ИмяВременногоФайлаКоманда,,Истина,retCode);


	Рез = ОригСтр;

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяВременногоФайлаЛог,"UTF-8");

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Лог.Информация(Стр);
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;

		Если СокрЛП(Стр) = "" Тогда
			Продолжить;
		КонецЕсли;


		Рез = Стр;

	КонецЦикла;

	Текст.Закрыть();

	Возврат Рез;

КонецФункции

Процедура ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(ПараметрыСборки)
	МассивКлючей = Новый Массив;

	ВложенныеСоответствия = Новый Соответствие;
	ВложенныеМассивыСтруктура = Новый Структура;

	Сообщить(ТипЗнч(ПараметрыСборки));

	Для каждого ПараметрСборки Из ПараметрыСборки Цикл
		Если Лев(ПараметрСборки.Значение,1) = "." Тогда
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		КонецЕсли;
		
		//Сообщить("Ключ = "+ПараметрСборки.Ключ+"; значение = "+ПараметрСборки.Значение);
		//Сообщить(ТипЗнч(ПараметрСборки.Значение));

		Если ТипЗнч(ПараметрСборки.Значение) = Тип("Соответствие") Тогда
			ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(ПараметрСборки.Значение);
			ВложенныеСоответствия.Вставить(ПараметрСборки.Ключ, ПараметрСборки.Значение);
		КонецЕсли;	

		Если ТипЗнч(ПараметрСборки.Значение) = Тип("Массив") Тогда
			
			ВложенныйМассив = Новый Массив;
			
			Для Каждого ЭлементМассива Из ПараметрСборки.Значение Цикл
			
				Было  = ЭлементМассива;
				
				Если ТипЗнч(Было) = Тип("Соответствие") Тогда
					ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(Было);
					Стало = Было;
				Иначе
					Стало = ПреобразоватьПутьСТочкамиКНормальномуПути(ЭлементМассива);
					Стало = СокрЛП(Стало);
				КонецЕсли;
				
				
				ВложенныйМассив.Добавить(Стало);

			КонецЦикла;	

			ВложенныеМассивыСтруктура.Вставить(ПараметрСборки.Ключ, ВложенныйМассив);
		КонецЕсли;	

	КонецЦикла;

	Для каждого Ключ Из МассивКлючей Цикл
		Было  = ПараметрыСборки[Ключ];
		Стало = ПреобразоватьПутьСТочкамиКНормальномуПути(Было);
		//Сообщить("Было=" + Было + ", Стало="+Стало);

		ПараметрыСборки.Вставить(Ключ,СокрЛП(Стало));
	КонецЦикла;

	Если ВложенныеСоответствия.Количество() <> 0 Тогда
		Для Каждого ВложенноеСоответствие Из ВложенныеСоответствия Цикл
			ПараметрыСборки.Вставить(ВложенноеСоответствие.Ключ, ВложенноеСоответствие.Значение); 
		КонецЦикла;	
	КонецЕсли;

	Если ВложенныеМассивыСтруктура.Количество() <> 0 Тогда
		Для Каждого ВложенныйМассив Из ВложенныеМассивыСтруктура Цикл
			ПараметрыСборки.Вставить(ВложенныйМассив.Ключ, ВложенныйМассив.Значение);
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры



Процедура ОчиститьВременныйКаталог(ВременныйКаталог)
	Файлы = НайтиФайлы(ВременныйКаталог,"*",Ложь);
	Для Каждого Файл Из Файлы Цикл
		УдалитьФайлы(Файл.ПолноеИмя);
	КонецЦикла;	
КонецПроцедуры

Процедура ОбработатьФайлConfiguration_xml(ИмяФайла,Версия)
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	
	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайла,"UTF-8",,Ложь); 
	
	ЗначениеВерсия = "DontUse";
	Если Версия = "8.3.9" Тогда
		ЗначениеВерсия = "VERSION" + СтрЗаменить(Версия,".","_");
	ИначеЕсли (Версия >= "8.3.10") И (СтрДлина(Версия) = 6) Тогда
		ЗначениеВерсия = "VERSION" + СтрЗаменить(Версия,".","_");
	КонецЕсли;	 
	
	
	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;	 
		
		Если Найти(Стр,"<CompatibilityMode>") > 0 Тогда
			Стр = "			<CompatibilityMode>" + ЗначениеВерсия + "</CompatibilityMode>";
		КонецЕсли;	 
		
		ЗТ.ЗаписатьСтроку(Стр); 
	КонецЦикла;	
	
	Текст.Закрыть();
	ЗТ.Закрыть();
	
	КопироватьФайл(ИмяВременногоФайла,ИмяФайла);
	УдалитьФайлы(ИмяВременногоФайла);
КонецПроцедуры

Функция ПолучитьВременныйКаталог()
	ИмяФайла = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(ИмяФайла);
	Возврат ИмяФайла;
КонецФункции	

Процедура СоздатьБазу82ЕслиЕёНет(_конфигурация)
	Если _конфигурация.Версия = "8.2" Тогда
		указательНаБазу = Новый Файл(_конфигурация.СоздаваемаяБаза + "\1Cv8.1cd");
		Если НЕ указательНаБазу.Существует() Тогда
			лог.Отладка("Создание сервисной базы контрибьютора 8.2" + _конфигурация.СоздаваемаяБаза);
			
			УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
			путьКПлатформе = УправлениеКонфигуратором.ПолучитьПутьКВерсииПлатформы("8.2");
			УправлениеКонфигуратором.ПутьКПлатформе1С(путьКПлатформе);
			УправлениеКонфигуратором.КаталогСборки("./ServiceBases/");	
			УправлениеКонфигуратором.СоздатьФайловуюБазу(_конфигурация.СоздаваемаяБаза);
		КонецЕсли;	
	КонецЕсли;	 
КонецПроцедуры

Лог = Логирование.ПолучитьЛог("behavior.build.log");
//Лог.УстановитьУровень(УровниЛога.Отладка);

массивСервисныхБаз = Новый Массив();

массивСервисныхБаз.Добавить(Новый Структура("ПутьКИсходникам,СоздаваемаяБаза, Версия",
	"./../../git-repo/SRC/","./tools/ServiceBases/v83CORP", "8.3.19"));
//@# Начало МА	
массивСервисныхБаз[массивСервисныхБаз.Количество()-1].Вставить("ПутьКДТ","./../../git-repo/DT/corp_init.dt");	
//@# Конец МА

ВременныйМассив = Новый Массив;
Для Каждого СервиснаяБаза Из массивСервисныхБаз Цикл
	ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(СервиснаяБаза);
	ВременныйМассив.Добавить(СервиснаяБаза);
КонецЦикла;	
массивСервисныхБаз = ВременныйМассив;


УправлениеКонфигуратором = Новый УправлениеКонфигуратором();
УправлениеКонфигуратором.КаталогСборки(".\tools\ServiceBases\");	

Для каждого _конфигурация из массивСервисныхБаз Цикл
	
	//@# Начало МА
	Лог.Информация("Начало: Создание базы, если она еще не создана");
	//@# Конец МА
	СоздатьБазу82ЕслиЕёНет(_конфигурация);
	//@# Начало МА
	Лог.Информация("Конец: Создание базы, если она еще не создана");
	//@# Конец МА
	
	Лог.Информация("Обрабатываю исходные файлы " + _конфигурация.ПутьКИсходникам + ", " + _конфигурация.Версия);
	указательНаБазу = Новый Файл(_конфигурация.СоздаваемаяБаза + "\1Cv8.1cd");
	Попытка
		путьКПлатформе = УправлениеКонфигуратором.ПолучитьПутьКВерсииПлатформы(_конфигурация.Версия);
	Исключение
		Лог.Информация("Платформа версии " + _конфигурация.Версия + " на данном компьютере не установлена.");
		Продолжить;
	КонецПопытки;
	УправлениеКонфигуратором.ПутьКПлатформе1С(путьКПлатформе);

	Если указательНаБазу.Существует() Тогда
		лог.Отладка("Ранее был создан каталог " + _конфигурация.СоздаваемаяБаза);
	Иначе
		лог.Отладка("Создание сервисной базы контрибьютора " + _конфигурация.СоздаваемаяБаза);
		УправлениеКонфигуратором.СоздатьФайловуюБазу(_конфигурация.СоздаваемаяБаза);
	КонецЕсли;	

	//@# Начало МА
	ИмяПользователяБазы = "";
	ПарольПользователяБазы = "";
	
	Если Не _конфигурация.Свойство("ПутьКДТ") = Неопределено Тогда
		
		ИмяПользователяБазы = "Админ";
		ПарольПользователяБазы = "";
		
		УправлениеКонфигуратором.УстановитьКонтекст("/F" + _конфигурация.СоздаваемаяБаза + "\","","");
	
		ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
		ПараметрыЗапуска.Добавить("/RestoreIB """ + _конфигурация.ПутьКДТ + """");
		
		Попытка
			Лог.Информация("Начало: Загрузка начальной базы из дт");
			УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
			Лог.Информация("Завершение: Загрузка начальной базы из дт");
		Исключение
			УправлениеКонфигуратором.УстановитьКонтекст("/F" + _конфигурация.СоздаваемаяБаза + "\",ИмяПользователяБазы,ПарольПользователяБазы);
	
			ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
			ПараметрыЗапуска.Добавить("/RestoreIB """ + _конфигурация.ПутьКДТ + """");
			
			Лог.Информация("Начало: Загрузка начальной базы из дт");
			УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
			Лог.Информация("Завершение: Загрузка начальной базы из дт");
		КонецПопытки;	
				
	КонецЕсли;
	//@# Конец МА

	//@# Начало МА
	//УправлениеКонфигуратором.УстановитьКонтекст("/F" + _конфигурация.СоздаваемаяБаза + "\","","");
	УправлениеКонфигуратором.УстановитьКонтекст("/F" + _конфигурация.СоздаваемаяБаза + "\",ИмяПользователяБазы,ПарольПользователяБазы);
	//@# Конец МА
	
	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles """ + _конфигурация.ПутьКИсходникам + """"); 

	Лог.Информация("Начало: Загрузка конфигурации из файлов");
	УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	Лог.Информация("Завершение: Загрузка Конфигурации из файлов");

	//@# Начало MA
	//------------
	//Если Найти(_конфигурация.ПутьКИсходникам,"82") = 0 Тогда
	//	//теперь выгрузим конфу в файлы ещё раз и заменим параметр CompatibilityMode на DontUse, чтобы гарантировать, что не используется режим совместимости
	//	ВременныйКаталог = ПолучитьВременныйКаталог();
	//	
	//	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	//	ПараметрыЗапуска.Добавить("/DumpConfigToFiles  """ + ВременныйКаталог + """"); 
	//	УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	//	
	//	//Сообщить("ВременныйКаталог="+ВременныйКаталог);
	//	ОбработатьФайлConfiguration_xml(ВременныйКаталог + "\Configuration.xml",_конфигурация.Версия);
	//	
	//	//теперь загрузим конфу обратно
	//	ПараметрыЗапуска = УправлениеКонфигуратором.ПолучитьПараметрыЗапуска();
	//	ПараметрыЗапуска.Добавить("/LoadConfigFromFiles  """ + ВременныйКаталог + """"); 
	//	УправлениеКонфигуратором.ВыполнитьКоманду(ПараметрыЗапуска);
	//	
	//	ОчиститьВременныйКаталог(ВременныйКаталог);
	//КонецЕсли;	
	//@# Конец МА 
	
	//УправлениеКонфигуратором.ВыполнитьСинтаксическийКонтроль();
	
	Лог.Информация("Начало: Обновление конфигурации базы данных");	
	УправлениеКонфигуратором.ОбновитьКонфигурациюБазыДанных();
	Лог.Информация("Завершение: Обновление конфигурации базы данных");

КонецЦикла;

//УправлениеКонфигуратором.ЗапуститьВРежимеПредприятия("",Истина);

