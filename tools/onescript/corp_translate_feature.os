#Использовать logos
#Использовать "./РаботаСФайлами"

Перем Лог;
Перем МассивВременныхФайлов;

Функция ПолучитьИмяВременногоФайлаЛокально(Расширение="")
	Если Не ТипЗнч(МассивВременныхФайлов) = Тип("Массив") Тогда
		МассивВременныхФайлов = Новый Массив;		
	КонецЕсли;

	ТекВременныйФайл = ПолучитьИмяВременногоФайла(Расширение);
	МассивВременныхФайлов.Добавить(ТекВременныйФайл);

	Возврат ТекВременныйФайл;
КонецФункции

Функция ПреобразоватьПутьСТочкамиКНормальномуПути(ОригСтр)
	ИмяВременногоФайлаКоманда = ПолучитьИмяВременногоФайлаЛокально("cmd");
	ИмяВременногоФайлаЛог     = ПолучитьИмяВременногоФайлаЛокально("txt");
	
	Лог.Информация("ИмяВременногоФайлаКоманда: " + ИмяВременногоФайлаКоманда);
	Лог.Информация("ИмяВременногоФайлаЛог: " + ИмяВременногоФайлаЛог);
	//ИмяВременногоФайлаЛог     ="e:\vanessa\temp\runbehaviorTemp.txt";
	

	//ИмяВременногоФайлаКоманда = "h:\commons\temp\111.cmd";
	//ИмяВременногоФайлаЛог     = "h:\commons\temp\111.txt";


	Команда = "
				|@echo on
				|chcp 65001
				|for %%f in ( """ + ОригСтр + """ ) do set fullname=%%~ff
				|echo %fullname% > " + ИмяВременногоФайлаЛог + "
				|rem pause";

	//ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманда,"UTF-8",,Ложь);
	ЗТ = Новый ЗаписьТекста(ИмяВременногоФайлаКоманда,"UTF-8");
	ЗТ.ЗаписатьСтроку(Команда);

	ЗТ.Закрыть();




	retCode = -1;
	ЗапуститьПриложение(ИмяВременногоФайлаКоманда,,Истина,retCode);


	Рез = ОригСтр;

	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяВременногоФайлаЛог,"UTF-8");

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Лог.Информация(Стр);
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;

		Если СокрЛП(Стр) = "" Тогда
			Продолжить;
		КонецЕсли;


		Рез = Стр;

	КонецЦикла;

	Текст.Закрыть();

	Возврат Рез;

КонецФункции

Процедура ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(ПараметрыСборки)
	МассивКлючей = Новый Массив;

	ВложенныеСоответствия = Новый Соответствие;
	ВложенныеМассивыСтруктура = Новый Структура;

	Сообщить(ТипЗнч(ПараметрыСборки));

	Для каждого ПараметрСборки Из ПараметрыСборки Цикл
		Если Лев(ПараметрСборки.Значение,1) = "." Тогда
			МассивКлючей.Добавить(ПараметрСборки.Ключ);
		КонецЕсли;
		
		//Сообщить("Ключ = "+ПараметрСборки.Ключ+"; значение = "+ПараметрСборки.Значение);
		//Сообщить(ТипЗнч(ПараметрСборки.Значение));

		Если ТипЗнч(ПараметрСборки.Значение) = Тип("Соответствие") Тогда
			ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(ПараметрСборки.Значение);
			ВложенныеСоответствия.Вставить(ПараметрСборки.Ключ, ПараметрСборки.Значение);
		КонецЕсли;	

		Если ТипЗнч(ПараметрСборки.Значение) = Тип("Массив") Тогда
			
			ВложенныйМассив = Новый Массив;
			
			Для Каждого ЭлементМассива Из ПараметрСборки.Значение Цикл
			
				Было  = ЭлементМассива;
				
				Если ТипЗнч(Было) = Тип("Соответствие") Тогда
					ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(Было);
					Стало = Было;
				Иначе
					Стало = ПреобразоватьПутьСТочкамиКНормальномуПути(ЭлементМассива);
					Стало = СокрЛП(Стало);
				КонецЕсли;
				
				
				ВложенныйМассив.Добавить(Стало);

			КонецЦикла;	

			ВложенныеМассивыСтруктура.Вставить(ПараметрСборки.Ключ, ВложенныйМассив);
		КонецЕсли;	

	КонецЦикла;

	Для каждого Ключ Из МассивКлючей Цикл
		Было  = ПараметрыСборки[Ключ];
		Стало = ПреобразоватьПутьСТочкамиКНормальномуПути(Было);
		//Сообщить("Было=" + Было + ", Стало="+Стало);

		ПараметрыСборки.Вставить(Ключ,СокрЛП(Стало));
	КонецЦикла;

	Если ВложенныеСоответствия.Количество() <> 0 Тогда
		Для Каждого ВложенноеСоответствие Из ВложенныеСоответствия Цикл
			ПараметрыСборки.Вставить(ВложенноеСоответствие.Ключ, ВложенноеСоответствие.Значение); 
		КонецЦикла;	
	КонецЕсли;

	Если ВложенныеМассивыСтруктура.Количество() <> 0 Тогда
		Для Каждого ВложенныйМассив Из ВложенныеМассивыСтруктура Цикл
			ПараметрыСборки.Вставить(ВложенныйМассив.Ключ, ВложенныйМассив.Значение);
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

Функция ПрочитатьФайлJSON(ИмяФайла)
	
	ИмяВременногоФайлаJSON = ПолучитьИмяВременногоФайлаЛокально("json");

	JsonСтрока  = ПрочитатьФайлВСтроку(ИмяФайла);
	ПарсерJSON  = Новый ПарсерJSON();
	Рез         = ПарсерJSON.ПрочитатьJSON(JsonСтрока);
	ПреобразоватьПараметрыКоторыеНачинаютсяСТочкиКНормальнымПутям(Рез);
	Рез.Вставить("ИмяФайлаСборки",ИмяФайла);
	Рез.Вставить("ИмяВременногоФайлаJSON", ИмяВременногоФайлаJSON);
	
	//Рез.Вставить("КомандаЗапускаБраузера", """" + ПолучитьСтрокуЗапускаChrome() + """ --remote-debugging-port=9222");

	ТекстФайла = РаботаСФайлами.ОБъектВJson(Рез);
	РаботаСФайлами.ЗаписатьФайл(ИмяВременногоФайлаJSON, ТекстФайла);
	Сообщить(ИмяВременногоФайлаJSON);

	Возврат Рез;
КонецФункции

Функция ПрочитатьФайлВСтроку(Знач ИмяФайла)
	ФайлПроверкаСуществования = Новый Файл(ИмяФайла);
	
	Если НЕ ФайлПроверкаСуществования.Существует() Тогда
		ВызватьИсключение("Файл <" + ИмяФайла + "> не существует!");
	КонецЕсли;


	Текст = Новый ЧтениеТекста;
	Текст.Открыть(ИмяФайла,"UTF-8");
	Рез = "";

	Пока Истина Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли;

		Рез = Рез + Стр + Символы.ПС;
	КонецЦикла;

	Текст.Закрыть();

	Возврат  Рез;
КонецФункции

Лог = Логирование.ПолучитьЛог("behavior.build.log");
//Лог.УстановитьУровень(УровниЛога.Отладка);

Стр = Неопределено;
Лог.Информация(АргументыКоманднойСтроки.Количество());
Лог.Информация(ТипЗнч(АргументыКоманднойСтроки));


Если АргументыКоманднойСтроки.Количество() < 3 Тогда
	Лог.Ошибка("Не переданы файлы параметров!");
	Лог.Ошибка("    Параметр 1: Файл словаря <DictRuRo.json>");
	Лог.Ошибка("    Параметр 2: Файл источник");
	Лог.Ошибка("    Парамерт 3: Выходящий файл");
	//Возврат;
ИначеЕсли АргументыКоманднойСтроки.Количество() > 3 Тогда
	Лог.Ошибка("Скрипт принимает не больше 3 параметров.");
	//Возврат;
Иначе
	Стр = АргументыКоманднойСтроки[0];
	Стр = СтрЗаменить(Стр,Символ(13),"");
	ПутьСловарь = ПреобразоватьПутьСТочкамиКНормальномуПути(Стр);
	

	Стр = АргументыКоманднойСтроки[1];
	Стр = СтрЗаменить(Стр,Символ(13),"");
	ПутьВходящийФайл = ПреобразоватьПутьСТочкамиКНормальномуПути(Стр);
	

	Стр = АргументыКоманднойСтроки[2];
	Стр = СтрЗаменить(Стр,Символ(13),"");
	ПутьИсходящийФайл = ПреобразоватьПутьСТочкамиКНормальномуПути(Стр);
	
КонецЕсли;

СоответствиеСловарь = ПрочитатьФайлJSON(ПутьСловарь);
СтрокаФайлИсточник = ПрочитатьФайлВСтроку(ПутьВходящийФайл);
Лог.Информация(СтрокаФайлИсточник);
СтрокаВремФайлИсходящий = СтрокаФайлИсточник;
Для Каждого ТекСтрокаСловаря Из СоответствиеСловарь Цикл
	РегулярноеВыражение = Новый РегулярноеВыражение("(?<!с именем[\s'""]*)\b"+ТекСтрокаСловаря.Ключ+"\b");
	РегулярноеВыражение.Многострочный = Истина;
	РегулярноеВыражение.ИгнорироватьРегистр = Истина;
	Лог.Информация("Шаблон: " + "\b"+ТекСтрокаСловаря.Ключ+"\b");
	Лог.Информация(РегулярноеВыражение.НайтиСовпадения(СтрокаВремФайлИсходящий).Количество());
	СтрокаВремФайлИсходящий = РегулярноеВыражение.Заменить(СтрокаВремФайлИсходящий, ТекСтрокаСловаря.Значение);
КонецЦикла;	

ЗТ = Новый ЗаписьТекста(ПутьИсходящийФайл,"UTF-8",,Ложь); 
ЗТ.ЗаписатьСтроку(СтрокаВремФайлИсходящий);
ЗТ.Закрыть();